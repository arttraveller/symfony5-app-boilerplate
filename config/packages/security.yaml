security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # the name of your user provider can be anything
        custom_user_provider:
            id: App\Security\UserProvider

    encoders:
        App\Security\UserIdentity:
            algorithm: auto

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_signin:
            pattern:  ^/api/v1/signin
            user_checker: App\Security\UserChecker
            stateless: true
            json_login:
                check_path:               /api/v1/signin
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            user_checker: App\Security\UserChecker
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            lazy: true
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: auth_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            access_denied_handler: App\Security\AccessDeniedHandler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin panel
        - { path: ^/admin, roles: ROLE_ADMIN }
        # API
        - { path: ^/api/v1/signin, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_USER }
        # Web
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/signin, roles: PUBLIC_ACCESS }
        - { path: ^/signup, roles: PUBLIC_ACCESS }
        - { path: ^/password/reset, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_USER }
